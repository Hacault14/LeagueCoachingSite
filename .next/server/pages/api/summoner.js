"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/summoner";
exports.ids = ["pages/api/summoner"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsummoner&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csummoner.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsummoner&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csummoner.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_summoner_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src\\pages\\api\\summoner.ts */ \"(api)/./src/pages/api/summoner.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_summoner_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_summoner_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/summoner\",\n        pathname: \"/api/summoner\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_summoner_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnN1bW1vbmVyJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGc3JjJTVDcGFnZXMlNUNhcGklNUNzdW1tb25lci50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUMyRDtBQUMzRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsdURBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHVEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8/NDU3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vc3JjXFxcXHBhZ2VzXFxcXGFwaVxcXFxzdW1tb25lci50c1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3N1bW1vbmVyXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvc3VtbW9uZXJcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsummoner&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csummoner.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/pages/api/summoner.ts":
/*!***********************************!*\
  !*** ./src/pages/api/summoner.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nconst REGION_ROUTING = {\n    \"na1\": \"americas\",\n    \"euw1\": \"europe\",\n    \"kr\": \"asia\",\n    \"br1\": \"americas\",\n    \"eun1\": \"europe\",\n    \"jp1\": \"asia\",\n    \"la1\": \"americas\",\n    \"la2\": \"americas\",\n    \"oc1\": \"sea\",\n    \"tr1\": \"europe\",\n    \"ru\": \"europe\"\n};\nasync function getMatchDetails(matchId, region, apiKey) {\n    const routingValue = REGION_ROUTING[region] || \"americas\";\n    const response = await fetch(`https://${routingValue}.api.riotgames.com/lol/match/v5/matches/${matchId}`, {\n        headers: {\n            \"X-Riot-Token\": apiKey\n        }\n    });\n    if (!response.ok) {\n        console.error(`Failed to fetch match ${matchId}:`, await response.text());\n        return null;\n    }\n    return response.json();\n}\nasync function getRankedStats(summonerId, region, apiKey) {\n    const response = await fetch(`https://${region}.api.riotgames.com/lol/league/v4/entries/by-summoner/${summonerId}`, {\n        headers: {\n            \"X-Riot-Token\": apiKey\n        }\n    });\n    if (!response.ok) {\n        console.error(\"Failed to fetch ranked stats:\", await response.text());\n        return null;\n    }\n    return response.json();\n}\nfunction calculateChampionStats(matches, puuid) {\n    const championStats = {};\n    matches.forEach((match)=>{\n        // Skip remade games (games shorter than 5 minutes)\n        if (match.info.gameDuration < 300) return; // 300 seconds = 5 minutes\n        // Only process ranked games\n        if (match.info.queueId !== 420 && match.info.queueId !== 440) return;\n        const playerStats = match.info.participants.find((p)=>p.puuid === puuid);\n        if (!playerStats) return;\n        const championName = playerStats.championName;\n        const gameDurationMinutes = match.info.gameDuration / 60;\n        if (!championStats[championName]) {\n            championStats[championName] = {\n                championName,\n                gamesPlayed: 0,\n                wins: 0,\n                totalKills: 0,\n                totalDeaths: 0,\n                totalAssists: 0,\n                totalCS: 0,\n                totalGameDuration: 0,\n                totalVisionScore: 0\n            };\n        }\n        championStats[championName].gamesPlayed++;\n        championStats[championName].wins += playerStats.win ? 1 : 0;\n        championStats[championName].totalKills += playerStats.kills;\n        championStats[championName].totalDeaths += playerStats.deaths;\n        championStats[championName].totalAssists += playerStats.assists;\n        championStats[championName].totalCS += playerStats.totalMinionsKilled + playerStats.neutralMinionsKilled;\n        championStats[championName].totalGameDuration += gameDurationMinutes;\n        championStats[championName].totalVisionScore += playerStats.visionScore;\n    });\n    return Object.values(championStats).map((stats)=>({\n            championName: stats.championName,\n            gamesPlayed: stats.gamesPlayed,\n            winRate: (stats.wins / stats.gamesPlayed * 100).toFixed(1),\n            avgKills: (stats.totalKills / stats.gamesPlayed).toFixed(1),\n            avgDeaths: (stats.totalDeaths / stats.gamesPlayed).toFixed(1),\n            avgAssists: (stats.totalAssists / stats.gamesPlayed).toFixed(1),\n            kda: ((stats.totalKills + stats.totalAssists) / Math.max(1, stats.totalDeaths)).toFixed(2),\n            avgCSPerMin: (stats.totalCS / stats.totalGameDuration).toFixed(1),\n            avgCSPerGame: Math.round(stats.totalCS / stats.gamesPlayed),\n            avgVisionScore: (stats.totalVisionScore / stats.gamesPlayed).toFixed(1)\n        })).sort((a, b)=>b.gamesPlayed - a.gamesPlayed); // Sort by most played\n}\nfunction calculateRoleStats(matches, puuid) {\n    const roleStats = {\n        Top: {\n            games: 0,\n            wins: 0,\n            percentage: 0\n        },\n        Jungle: {\n            games: 0,\n            wins: 0,\n            percentage: 0\n        },\n        Mid: {\n            games: 0,\n            wins: 0,\n            percentage: 0\n        },\n        ADC: {\n            games: 0,\n            wins: 0,\n            percentage: 0\n        },\n        Support: {\n            games: 0,\n            wins: 0,\n            percentage: 0\n        }\n    };\n    // Filter for only ranked games (420 is Solo/Duo, 440 is Flex)\n    const validMatches = matches.filter((match)=>match && match.info.gameDuration >= 300 && // Skip remakes\n        (match.info.queueId === 420 || match.info.queueId === 440 // Only ranked games\n        ));\n    validMatches.forEach((match)=>{\n        const playerStats = match.info.participants.find((p)=>p.puuid === puuid);\n        if (!playerStats) return;\n        // Use teamPosition for more accurate role detection\n        const role = determineRole(playerStats);\n        if (role in roleStats) {\n            roleStats[role].games++;\n            roleStats[role].wins += playerStats.win ? 1 : 0;\n        }\n    });\n    // Calculate percentages based only on ranked games\n    const totalGames = validMatches.length;\n    Object.keys(roleStats).forEach((role)=>{\n        roleStats[role].percentage = roleStats[role].games / totalGames * 100;\n    });\n    return roleStats;\n}\nfunction createCoachingPrompt(rankedStats, championStats, roleStats) {\n    if (!rankedStats || championStats.length === 0) {\n        return \"No ranked data available for analysis.\";\n    }\n    const soloQueue = rankedStats.find((queue)=>queue.queueType === \"RANKED_SOLO_5x5\");\n    const rankedInfo = soloQueue ? `\r\nRanked Profile:\r\n- Tier: ${soloQueue.tier} ${soloQueue.rank}\r\n- LP: ${soloQueue.leaguePoints}\r\n- Win Rate: ${(soloQueue.wins / (soloQueue.wins + soloQueue.losses) * 100).toFixed(1)}%\r\n- Total Games: ${soloQueue.wins + soloQueue.losses}` : \"No Solo Queue data available.\";\n    const roleSection = `\r\nRole Distribution:\r\n${Object.entries(roleStats).filter(([_, stats])=>stats.games > 0).sort(([_, a], [__, b])=>b.games - a.games).map(([role, stats])=>`${role}: ${stats.games} games (${stats.percentage.toFixed(1)}% of games, ${(stats.wins / stats.games * 100).toFixed(1)}% WR)`).join(\"\\n\")}`;\n    const championSection = championStats.length > 0 ? `\r\nChampion Statistics (Ranked Season):\r\n${championStats.map((champ)=>`\r\n${champ.championName} (${champ.gamesPlayed} games):\r\n- Win Rate: ${champ.winRate}%\r\n- KDA: ${champ.avgKills}/${champ.avgDeaths}/${champ.avgAssists} (${champ.kda})\r\n- CS/min: ${champ.avgCSPerMin}\r\n- Vision Score: ${champ.avgVisionScore}`).join(\"\\n\")}` : \"\";\n    return `As a League of Legends coach, analyze this player's ranked season performance: \r\n${rankedInfo}\r\n${roleSection}\r\n${championSection}\r\n\r\nAnalyze the provided statistics and provide 3 goals, each accompanied by 3 actionable suggestions for improvement.\r\n\r\nTo help you choose the goals, here are some rules in the following format:\r\n- [player tendency]: [goal]\r\n\r\n- The player is playing their main role in less than 80% of their games: Stick to Main Role\r\n- The player has more than 5 games on a champion that is not in their top 3 most played champions: Stick to Main Champions\r\n- The player has on average more than 5 deaths: Minimize Deaths\r\n- The player has on average less than 7 CS/min: Improve CS/min\r\n`;\n}\nasync function getMatchDetailsWithRateLimit(matchIds, region, apiKey) {\n    const matchDetails = [];\n    const batchSize = 20; // Process 20 requests at a time\n    // Split matchIds into batches of 20\n    for(let i = 0; i < matchIds.length; i += batchSize){\n        const batch = matchIds.slice(i, i + batchSize);\n        // Process batch\n        const batchResults = await Promise.all(batch.map((matchId)=>getMatchDetails(matchId, region, apiKey)));\n        matchDetails.push(...batchResults);\n        // If there are more batches to process, wait 1 second\n        if (i + batchSize < matchIds.length) {\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n        }\n    }\n    return matchDetails;\n}\nfunction determineRole(playerStats) {\n    // Use teamPosition as primary indicator (most reliable for ranked games)\n    if (playerStats.teamPosition) {\n        const positions = {\n            \"TOP\": \"Top\",\n            \"JUNGLE\": \"Jungle\",\n            \"MIDDLE\": \"Mid\",\n            \"BOTTOM\": \"ADC\",\n            \"UTILITY\": \"Support\"\n        };\n        return positions[playerStats.teamPosition] || playerStats.teamPosition;\n    }\n    // Fallback to individualPosition if teamPosition is not available\n    if (playerStats.individualPosition && playerStats.individualPosition !== \"Invalid\") {\n        const positions = {\n            \"TOP\": \"Top\",\n            \"JUNGLE\": \"Jungle\",\n            \"MIDDLE\": \"Mid\",\n            \"BOTTOM\": \"ADC\",\n            \"UTILITY\": \"Support\"\n        };\n        return positions[playerStats.individualPosition] || playerStats.individualPosition;\n    }\n    return \"Unknown\";\n}\nasync function handler(req, res) {\n    const { gameName, tagLine, region = \"na1\" } = req.query;\n    if (!gameName || !tagLine) {\n        return res.status(400).json({\n            error: \"Game name and tag line are required\"\n        });\n    }\n    if (!process.env.RIOT_API_KEY) {\n        console.error(\"RIOT_API_KEY is not set in environment variables\");\n        return res.status(500).json({\n            error: \"Server configuration error\"\n        });\n    }\n    try {\n        // Step 1: Get PUUID using Riot ID\n        const accountUrl = `https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/${encodeURIComponent(gameName)}/${encodeURIComponent(tagLine)}`;\n        const accountResponse = await fetch(accountUrl, {\n            headers: {\n                \"X-Riot-Token\": process.env.RIOT_API_KEY\n            }\n        });\n        if (!accountResponse.ok) {\n            throw new Error(`Account API Error: ${await accountResponse.text()}`);\n        }\n        const accountData = await accountResponse.json();\n        const puuid = accountData.puuid;\n        // Step 2: Get summoner data using PUUID\n        const regionalApi = `https://${region.toLowerCase()}.api.riotgames.com`;\n        const summonerUrl = `${regionalApi}/lol/summoner/v4/summoners/by-puuid/${puuid}`;\n        const summonerResponse = await fetch(summonerUrl, {\n            headers: {\n                \"X-Riot-Token\": process.env.RIOT_API_KEY\n            }\n        });\n        if (!summonerResponse.ok) {\n            throw new Error(`Summoner API Error: ${await summonerResponse.text()}`);\n        }\n        const summonerData = await summonerResponse.json();\n        // Step 3: Get ranked stats\n        const rankedStats = await getRankedStats(summonerData.id, region, process.env.RIOT_API_KEY);\n        // Step 4: Get recent matches\n        const routingValue = REGION_ROUTING[region] || \"americas\";\n        const matchListUrl = `https://${routingValue}.api.riotgames.com/lol/match/v5/matches/by-puuid/${puuid}/ids?queue=420&start=0&count=100`;\n        const matchListResponse = await fetch(matchListUrl, {\n            headers: {\n                \"X-Riot-Token\": process.env.RIOT_API_KEY\n            }\n        });\n        if (!matchListResponse.ok) {\n            throw new Error(`Match list API Error: ${await matchListResponse.text()}`);\n        }\n        const matchIds = await matchListResponse.json();\n        // Step 5: Get match details with rate limiting\n        const matchDetails = await getMatchDetailsWithRateLimit(matchIds, region, process.env.RIOT_API_KEY);\n        // Step 6: Calculate stats\n        const championStats = calculateChampionStats(matchDetails.filter((match)=>match !== null), puuid);\n        const roleStats = calculateRoleStats(matchDetails.filter((match)=>match !== null), puuid);\n        const mainRole = Object.entries(roleStats).sort(([_, a], [__, b])=>b.games - a.games)[0];\n        // Create coaching prompt\n        const coachingPrompt = createCoachingPrompt(rankedStats, championStats, roleStats);\n        res.status(200).json({\n            account: accountData,\n            summoner: summonerData,\n            rankedStats,\n            championStats,\n            roleStats,\n            mainRole: mainRole[0],\n            coachingPrompt\n        });\n    } catch (error) {\n        console.error(\"Detailed error:\", error);\n        res.status(500).json({\n            error: \"Failed to fetch data\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WUFDQS9EO1lBQ0ErQztZQUNBdUUsVUFBVUEsUUFBUSxDQUFDLEVBQUU7WUFDckJDO1FBQ0Y7SUFFRixFQUFFLE9BQU8vSCxPQUFPO1FBQ2RELFFBQVFDLEtBQUssQ0FBQyxtQkFBbUJBO1FBQ2pDeUcsSUFBSUksTUFBTSxDQUFDLEtBQUszRyxJQUFJLENBQUM7WUFDbkJGLE9BQU87WUFDUGtJLFNBQVNsSSxpQkFBaUJvSCxRQUFRcEgsTUFBTW1JLE9BQU8sR0FBRztRQUNwRDtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvYXBpL3N1bW1vbmVyLnRzPzY1MmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCdcclxuXHJcbmNvbnN0IFJFR0lPTl9ST1VUSU5HOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xyXG4gICduYTEnOiAnYW1lcmljYXMnLFxyXG4gICdldXcxJzogJ2V1cm9wZScsXHJcbiAgJ2tyJzogJ2FzaWEnLFxyXG4gICdicjEnOiAnYW1lcmljYXMnLFxyXG4gICdldW4xJzogJ2V1cm9wZScsXHJcbiAgJ2pwMSc6ICdhc2lhJyxcclxuICAnbGExJzogJ2FtZXJpY2FzJyxcclxuICAnbGEyJzogJ2FtZXJpY2FzJyxcclxuICAnb2MxJzogJ3NlYScsXHJcbiAgJ3RyMSc6ICdldXJvcGUnLFxyXG4gICdydSc6ICdldXJvcGUnLFxyXG59XHJcblxyXG5pbnRlcmZhY2UgQ2hhbXBpb25TdGF0cyB7XHJcbiAgY2hhbXBpb25OYW1lOiBzdHJpbmc7XHJcbiAgZ2FtZXNQbGF5ZWQ6IG51bWJlcjtcclxuICB3aW5zOiBudW1iZXI7XHJcbiAgdG90YWxLaWxsczogbnVtYmVyO1xyXG4gIHRvdGFsRGVhdGhzOiBudW1iZXI7XHJcbiAgdG90YWxBc3Npc3RzOiBudW1iZXI7XHJcbiAgdG90YWxDUzogbnVtYmVyO1xyXG4gIHRvdGFsR2FtZUR1cmF0aW9uOiBudW1iZXI7XHJcbiAgdG90YWxWaXNpb25TY29yZTogbnVtYmVyO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgUm9sZVN0YXRzIHtcclxuICBnYW1lczogbnVtYmVyO1xyXG4gIHdpbnM6IG51bWJlcjtcclxuICBwZXJjZW50YWdlOiBudW1iZXI7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGdldE1hdGNoRGV0YWlscyhtYXRjaElkOiBzdHJpbmcsIHJlZ2lvbjogc3RyaW5nLCBhcGlLZXk6IHN0cmluZykge1xyXG4gIGNvbnN0IHJvdXRpbmdWYWx1ZSA9IFJFR0lPTl9ST1VUSU5HW3JlZ2lvbl0gfHwgJ2FtZXJpY2FzJztcclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgYGh0dHBzOi8vJHtyb3V0aW5nVmFsdWV9LmFwaS5yaW90Z2FtZXMuY29tL2xvbC9tYXRjaC92NS9tYXRjaGVzLyR7bWF0Y2hJZH1gLFxyXG4gICAge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ1gtUmlvdC1Ub2tlbic6IGFwaUtleVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgKTtcclxuXHJcbiAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGZldGNoIG1hdGNoICR7bWF0Y2hJZH06YCwgYXdhaXQgcmVzcG9uc2UudGV4dCgpKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0UmFua2VkU3RhdHMoc3VtbW9uZXJJZDogc3RyaW5nLCByZWdpb246IHN0cmluZywgYXBpS2V5OiBzdHJpbmcpIHtcclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgYGh0dHBzOi8vJHtyZWdpb259LmFwaS5yaW90Z2FtZXMuY29tL2xvbC9sZWFndWUvdjQvZW50cmllcy9ieS1zdW1tb25lci8ke3N1bW1vbmVySWR9YCxcclxuICAgIHtcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdYLVJpb3QtVG9rZW4nOiBhcGlLZXlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICk7XHJcblxyXG4gIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCByYW5rZWQgc3RhdHM6JywgYXdhaXQgcmVzcG9uc2UudGV4dCgpKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY3VsYXRlQ2hhbXBpb25TdGF0cyhtYXRjaGVzOiBhbnlbXSwgcHV1aWQ6IHN0cmluZykge1xyXG4gIGNvbnN0IGNoYW1waW9uU3RhdHM6IHsgW2tleTogc3RyaW5nXTogQ2hhbXBpb25TdGF0cyB9ID0ge307XHJcblxyXG4gIG1hdGNoZXMuZm9yRWFjaChtYXRjaCA9PiB7XHJcbiAgICAvLyBTa2lwIHJlbWFkZSBnYW1lcyAoZ2FtZXMgc2hvcnRlciB0aGFuIDUgbWludXRlcylcclxuICAgIGlmIChtYXRjaC5pbmZvLmdhbWVEdXJhdGlvbiA8IDMwMCkgcmV0dXJuOyAgLy8gMzAwIHNlY29uZHMgPSA1IG1pbnV0ZXNcclxuICAgIFxyXG4gICAgLy8gT25seSBwcm9jZXNzIHJhbmtlZCBnYW1lc1xyXG4gICAgaWYgKG1hdGNoLmluZm8ucXVldWVJZCAhPT0gNDIwICYmIG1hdGNoLmluZm8ucXVldWVJZCAhPT0gNDQwKSByZXR1cm47XHJcbiAgICBcclxuICAgIGNvbnN0IHBsYXllclN0YXRzID0gbWF0Y2guaW5mby5wYXJ0aWNpcGFudHMuZmluZChcclxuICAgICAgKHA6IGFueSkgPT4gcC5wdXVpZCA9PT0gcHV1aWRcclxuICAgICk7XHJcblxyXG4gICAgaWYgKCFwbGF5ZXJTdGF0cykgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGNoYW1waW9uTmFtZSA9IHBsYXllclN0YXRzLmNoYW1waW9uTmFtZTtcclxuICAgIGNvbnN0IGdhbWVEdXJhdGlvbk1pbnV0ZXMgPSBtYXRjaC5pbmZvLmdhbWVEdXJhdGlvbiAvIDYwO1xyXG5cclxuICAgIGlmICghY2hhbXBpb25TdGF0c1tjaGFtcGlvbk5hbWVdKSB7XHJcbiAgICAgIGNoYW1waW9uU3RhdHNbY2hhbXBpb25OYW1lXSA9IHtcclxuICAgICAgICBjaGFtcGlvbk5hbWUsXHJcbiAgICAgICAgZ2FtZXNQbGF5ZWQ6IDAsXHJcbiAgICAgICAgd2luczogMCxcclxuICAgICAgICB0b3RhbEtpbGxzOiAwLFxyXG4gICAgICAgIHRvdGFsRGVhdGhzOiAwLFxyXG4gICAgICAgIHRvdGFsQXNzaXN0czogMCxcclxuICAgICAgICB0b3RhbENTOiAwLFxyXG4gICAgICAgIHRvdGFsR2FtZUR1cmF0aW9uOiAwLFxyXG4gICAgICAgIHRvdGFsVmlzaW9uU2NvcmU6IDBcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjaGFtcGlvblN0YXRzW2NoYW1waW9uTmFtZV0uZ2FtZXNQbGF5ZWQrKztcclxuICAgIGNoYW1waW9uU3RhdHNbY2hhbXBpb25OYW1lXS53aW5zICs9IHBsYXllclN0YXRzLndpbiA/IDEgOiAwO1xyXG4gICAgY2hhbXBpb25TdGF0c1tjaGFtcGlvbk5hbWVdLnRvdGFsS2lsbHMgKz0gcGxheWVyU3RhdHMua2lsbHM7XHJcbiAgICBjaGFtcGlvblN0YXRzW2NoYW1waW9uTmFtZV0udG90YWxEZWF0aHMgKz0gcGxheWVyU3RhdHMuZGVhdGhzO1xyXG4gICAgY2hhbXBpb25TdGF0c1tjaGFtcGlvbk5hbWVdLnRvdGFsQXNzaXN0cyArPSBwbGF5ZXJTdGF0cy5hc3Npc3RzO1xyXG4gICAgY2hhbXBpb25TdGF0c1tjaGFtcGlvbk5hbWVdLnRvdGFsQ1MgKz0gcGxheWVyU3RhdHMudG90YWxNaW5pb25zS2lsbGVkICsgcGxheWVyU3RhdHMubmV1dHJhbE1pbmlvbnNLaWxsZWQ7XHJcbiAgICBjaGFtcGlvblN0YXRzW2NoYW1waW9uTmFtZV0udG90YWxHYW1lRHVyYXRpb24gKz0gZ2FtZUR1cmF0aW9uTWludXRlcztcclxuICAgIGNoYW1waW9uU3RhdHNbY2hhbXBpb25OYW1lXS50b3RhbFZpc2lvblNjb3JlICs9IHBsYXllclN0YXRzLnZpc2lvblNjb3JlO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhjaGFtcGlvblN0YXRzKVxyXG4gICAgLm1hcChzdGF0cyA9PiAoe1xyXG4gICAgICBjaGFtcGlvbk5hbWU6IHN0YXRzLmNoYW1waW9uTmFtZSxcclxuICAgICAgZ2FtZXNQbGF5ZWQ6IHN0YXRzLmdhbWVzUGxheWVkLFxyXG4gICAgICB3aW5SYXRlOiAoKHN0YXRzLndpbnMgLyBzdGF0cy5nYW1lc1BsYXllZCkgKiAxMDApLnRvRml4ZWQoMSksXHJcbiAgICAgIGF2Z0tpbGxzOiAoc3RhdHMudG90YWxLaWxscyAvIHN0YXRzLmdhbWVzUGxheWVkKS50b0ZpeGVkKDEpLFxyXG4gICAgICBhdmdEZWF0aHM6IChzdGF0cy50b3RhbERlYXRocyAvIHN0YXRzLmdhbWVzUGxheWVkKS50b0ZpeGVkKDEpLFxyXG4gICAgICBhdmdBc3Npc3RzOiAoc3RhdHMudG90YWxBc3Npc3RzIC8gc3RhdHMuZ2FtZXNQbGF5ZWQpLnRvRml4ZWQoMSksXHJcbiAgICAgIGtkYTogKChzdGF0cy50b3RhbEtpbGxzICsgc3RhdHMudG90YWxBc3Npc3RzKSAvIE1hdGgubWF4KDEsIHN0YXRzLnRvdGFsRGVhdGhzKSkudG9GaXhlZCgyKSxcclxuICAgICAgYXZnQ1NQZXJNaW46IChzdGF0cy50b3RhbENTIC8gc3RhdHMudG90YWxHYW1lRHVyYXRpb24pLnRvRml4ZWQoMSksXHJcbiAgICAgIGF2Z0NTUGVyR2FtZTogTWF0aC5yb3VuZChzdGF0cy50b3RhbENTIC8gc3RhdHMuZ2FtZXNQbGF5ZWQpLFxyXG4gICAgICBhdmdWaXNpb25TY29yZTogKHN0YXRzLnRvdGFsVmlzaW9uU2NvcmUgLyBzdGF0cy5nYW1lc1BsYXllZCkudG9GaXhlZCgxKVxyXG4gICAgfSkpXHJcbiAgICAuc29ydCgoYSwgYikgPT4gYi5nYW1lc1BsYXllZCAtIGEuZ2FtZXNQbGF5ZWQpOyAvLyBTb3J0IGJ5IG1vc3QgcGxheWVkXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZVJvbGVTdGF0cyhtYXRjaGVzOiBhbnlbXSwgcHV1aWQ6IHN0cmluZykge1xyXG4gIGNvbnN0IHJvbGVTdGF0czogeyBba2V5OiBzdHJpbmddOiBSb2xlU3RhdHMgfSA9IHtcclxuICAgIFRvcDogeyBnYW1lczogMCwgd2luczogMCwgcGVyY2VudGFnZTogMCB9LFxyXG4gICAgSnVuZ2xlOiB7IGdhbWVzOiAwLCB3aW5zOiAwLCBwZXJjZW50YWdlOiAwIH0sXHJcbiAgICBNaWQ6IHsgZ2FtZXM6IDAsIHdpbnM6IDAsIHBlcmNlbnRhZ2U6IDAgfSxcclxuICAgIEFEQzogeyBnYW1lczogMCwgd2luczogMCwgcGVyY2VudGFnZTogMCB9LFxyXG4gICAgU3VwcG9ydDogeyBnYW1lczogMCwgd2luczogMCwgcGVyY2VudGFnZTogMCB9XHJcbiAgfTtcclxuXHJcbiAgLy8gRmlsdGVyIGZvciBvbmx5IHJhbmtlZCBnYW1lcyAoNDIwIGlzIFNvbG8vRHVvLCA0NDAgaXMgRmxleClcclxuICBjb25zdCB2YWxpZE1hdGNoZXMgPSBtYXRjaGVzLmZpbHRlcihtYXRjaCA9PiBcclxuICAgIG1hdGNoICYmIFxyXG4gICAgbWF0Y2guaW5mby5nYW1lRHVyYXRpb24gPj0gMzAwICYmIC8vIFNraXAgcmVtYWtlc1xyXG4gICAgKG1hdGNoLmluZm8ucXVldWVJZCA9PT0gNDIwIHx8IG1hdGNoLmluZm8ucXVldWVJZCA9PT0gNDQwKSAvLyBPbmx5IHJhbmtlZCBnYW1lc1xyXG4gICk7XHJcblxyXG4gIHZhbGlkTWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+IHtcclxuICAgIGNvbnN0IHBsYXllclN0YXRzID0gbWF0Y2guaW5mby5wYXJ0aWNpcGFudHMuZmluZChcclxuICAgICAgKHA6IGFueSkgPT4gcC5wdXVpZCA9PT0gcHV1aWRcclxuICAgICk7XHJcblxyXG4gICAgaWYgKCFwbGF5ZXJTdGF0cykgcmV0dXJuO1xyXG5cclxuICAgIC8vIFVzZSB0ZWFtUG9zaXRpb24gZm9yIG1vcmUgYWNjdXJhdGUgcm9sZSBkZXRlY3Rpb25cclxuICAgIGNvbnN0IHJvbGUgPSBkZXRlcm1pbmVSb2xlKHBsYXllclN0YXRzKTtcclxuICAgIGlmIChyb2xlIGluIHJvbGVTdGF0cykge1xyXG4gICAgICByb2xlU3RhdHNbcm9sZV0uZ2FtZXMrKztcclxuICAgICAgcm9sZVN0YXRzW3JvbGVdLndpbnMgKz0gcGxheWVyU3RhdHMud2luID8gMSA6IDA7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vIENhbGN1bGF0ZSBwZXJjZW50YWdlcyBiYXNlZCBvbmx5IG9uIHJhbmtlZCBnYW1lc1xyXG4gIGNvbnN0IHRvdGFsR2FtZXMgPSB2YWxpZE1hdGNoZXMubGVuZ3RoO1xyXG4gIE9iamVjdC5rZXlzKHJvbGVTdGF0cykuZm9yRWFjaChyb2xlID0+IHtcclxuICAgIHJvbGVTdGF0c1tyb2xlXS5wZXJjZW50YWdlID0gKHJvbGVTdGF0c1tyb2xlXS5nYW1lcyAvIHRvdGFsR2FtZXMpICogMTAwO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gcm9sZVN0YXRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVDb2FjaGluZ1Byb21wdChyYW5rZWRTdGF0czogYW55LCBjaGFtcGlvblN0YXRzOiBhbnlbXSwgcm9sZVN0YXRzOiBhbnkpIHtcclxuICBpZiAoIXJhbmtlZFN0YXRzIHx8IGNoYW1waW9uU3RhdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gJ05vIHJhbmtlZCBkYXRhIGF2YWlsYWJsZSBmb3IgYW5hbHlzaXMuJztcclxuICB9XHJcblxyXG4gIGNvbnN0IHNvbG9RdWV1ZSA9IHJhbmtlZFN0YXRzLmZpbmQoKHF1ZXVlOiBhbnkpID0+IHF1ZXVlLnF1ZXVlVHlwZSA9PT0gJ1JBTktFRF9TT0xPXzV4NScpO1xyXG4gIFxyXG4gIGNvbnN0IHJhbmtlZEluZm8gPSBzb2xvUXVldWUgPyBgXHJcblJhbmtlZCBQcm9maWxlOlxyXG4tIFRpZXI6ICR7c29sb1F1ZXVlLnRpZXJ9ICR7c29sb1F1ZXVlLnJhbmt9XHJcbi0gTFA6ICR7c29sb1F1ZXVlLmxlYWd1ZVBvaW50c31cclxuLSBXaW4gUmF0ZTogJHsoKHNvbG9RdWV1ZS53aW5zIC8gKHNvbG9RdWV1ZS53aW5zICsgc29sb1F1ZXVlLmxvc3NlcykpICogMTAwKS50b0ZpeGVkKDEpfSVcclxuLSBUb3RhbCBHYW1lczogJHtzb2xvUXVldWUud2lucyArIHNvbG9RdWV1ZS5sb3NzZXN9YCA6ICdObyBTb2xvIFF1ZXVlIGRhdGEgYXZhaWxhYmxlLic7XHJcblxyXG4gIGNvbnN0IHJvbGVTZWN0aW9uID0gYFxyXG5Sb2xlIERpc3RyaWJ1dGlvbjpcclxuJHtPYmplY3QuZW50cmllcyhyb2xlU3RhdHMpXHJcbiAgLmZpbHRlcigoW18sIHN0YXRzXSkgPT4gKHN0YXRzIGFzIFJvbGVTdGF0cykuZ2FtZXMgPiAwKVxyXG4gIC5zb3J0KChbXywgYV0sIFtfXywgYl0pID0+IChiIGFzIFJvbGVTdGF0cykuZ2FtZXMgLSAoYSBhcyBSb2xlU3RhdHMpLmdhbWVzKVxyXG4gIC5tYXAoKFtyb2xlLCBzdGF0c10pID0+IFxyXG4gICAgYCR7cm9sZX06ICR7KHN0YXRzIGFzIFJvbGVTdGF0cykuZ2FtZXN9IGdhbWVzICgkeyhzdGF0cyBhcyBSb2xlU3RhdHMpLnBlcmNlbnRhZ2UudG9GaXhlZCgxKX0lIG9mIGdhbWVzLCAkeygoKHN0YXRzIGFzIFJvbGVTdGF0cykud2lucyAvIChzdGF0cyBhcyBSb2xlU3RhdHMpLmdhbWVzKSAqIDEwMCkudG9GaXhlZCgxKX0lIFdSKWBcclxuICApLmpvaW4oJ1xcbicpfWA7XHJcblxyXG4gIGNvbnN0IGNoYW1waW9uU2VjdGlvbiA9IGNoYW1waW9uU3RhdHMubGVuZ3RoID4gMCA/IGBcclxuQ2hhbXBpb24gU3RhdGlzdGljcyAoUmFua2VkIFNlYXNvbik6XHJcbiR7Y2hhbXBpb25TdGF0cy5tYXAoY2hhbXAgPT4gYFxyXG4ke2NoYW1wLmNoYW1waW9uTmFtZX0gKCR7Y2hhbXAuZ2FtZXNQbGF5ZWR9IGdhbWVzKTpcclxuLSBXaW4gUmF0ZTogJHtjaGFtcC53aW5SYXRlfSVcclxuLSBLREE6ICR7Y2hhbXAuYXZnS2lsbHN9LyR7Y2hhbXAuYXZnRGVhdGhzfS8ke2NoYW1wLmF2Z0Fzc2lzdHN9ICgke2NoYW1wLmtkYX0pXHJcbi0gQ1MvbWluOiAke2NoYW1wLmF2Z0NTUGVyTWlufVxyXG4tIFZpc2lvbiBTY29yZTogJHtjaGFtcC5hdmdWaXNpb25TY29yZX1gKS5qb2luKCdcXG4nKX1gIDogJyc7XHJcblxyXG4gIHJldHVybiBgQXMgYSBMZWFndWUgb2YgTGVnZW5kcyBjb2FjaCwgYW5hbHl6ZSB0aGlzIHBsYXllcidzIHJhbmtlZCBzZWFzb24gcGVyZm9ybWFuY2U6IFxyXG4ke3JhbmtlZEluZm99XHJcbiR7cm9sZVNlY3Rpb259XHJcbiR7Y2hhbXBpb25TZWN0aW9ufVxyXG5cclxuQW5hbHl6ZSB0aGUgcHJvdmlkZWQgc3RhdGlzdGljcyBhbmQgcHJvdmlkZSAzIGdvYWxzLCBlYWNoIGFjY29tcGFuaWVkIGJ5IDMgYWN0aW9uYWJsZSBzdWdnZXN0aW9ucyBmb3IgaW1wcm92ZW1lbnQuXHJcblxyXG5UbyBoZWxwIHlvdSBjaG9vc2UgdGhlIGdvYWxzLCBoZXJlIGFyZSBzb21lIHJ1bGVzIGluIHRoZSBmb2xsb3dpbmcgZm9ybWF0OlxyXG4tIFtwbGF5ZXIgdGVuZGVuY3ldOiBbZ29hbF1cclxuXHJcbi0gVGhlIHBsYXllciBpcyBwbGF5aW5nIHRoZWlyIG1haW4gcm9sZSBpbiBsZXNzIHRoYW4gODAlIG9mIHRoZWlyIGdhbWVzOiBTdGljayB0byBNYWluIFJvbGVcclxuLSBUaGUgcGxheWVyIGhhcyBtb3JlIHRoYW4gNSBnYW1lcyBvbiBhIGNoYW1waW9uIHRoYXQgaXMgbm90IGluIHRoZWlyIHRvcCAzIG1vc3QgcGxheWVkIGNoYW1waW9uczogU3RpY2sgdG8gTWFpbiBDaGFtcGlvbnNcclxuLSBUaGUgcGxheWVyIGhhcyBvbiBhdmVyYWdlIG1vcmUgdGhhbiA1IGRlYXRoczogTWluaW1pemUgRGVhdGhzXHJcbi0gVGhlIHBsYXllciBoYXMgb24gYXZlcmFnZSBsZXNzIHRoYW4gNyBDUy9taW46IEltcHJvdmUgQ1MvbWluXHJcbmA7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGdldE1hdGNoRGV0YWlsc1dpdGhSYXRlTGltaXQobWF0Y2hJZHM6IHN0cmluZ1tdLCByZWdpb246IHN0cmluZywgYXBpS2V5OiBzdHJpbmcpIHtcclxuICBjb25zdCBtYXRjaERldGFpbHMgPSBbXTtcclxuICBjb25zdCBiYXRjaFNpemUgPSAyMDsgLy8gUHJvY2VzcyAyMCByZXF1ZXN0cyBhdCBhIHRpbWVcclxuICBcclxuICAvLyBTcGxpdCBtYXRjaElkcyBpbnRvIGJhdGNoZXMgb2YgMjBcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoSWRzLmxlbmd0aDsgaSArPSBiYXRjaFNpemUpIHtcclxuICAgIGNvbnN0IGJhdGNoID0gbWF0Y2hJZHMuc2xpY2UoaSwgaSArIGJhdGNoU2l6ZSk7XHJcbiAgICBcclxuICAgIC8vIFByb2Nlc3MgYmF0Y2hcclxuICAgIGNvbnN0IGJhdGNoUmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFxyXG4gICAgICBiYXRjaC5tYXAobWF0Y2hJZCA9PiBnZXRNYXRjaERldGFpbHMobWF0Y2hJZCwgcmVnaW9uLCBhcGlLZXkpKVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgbWF0Y2hEZXRhaWxzLnB1c2goLi4uYmF0Y2hSZXN1bHRzKTtcclxuICAgIFxyXG4gICAgLy8gSWYgdGhlcmUgYXJlIG1vcmUgYmF0Y2hlcyB0byBwcm9jZXNzLCB3YWl0IDEgc2Vjb25kXHJcbiAgICBpZiAoaSArIGJhdGNoU2l6ZSA8IG1hdGNoSWRzLmxlbmd0aCkge1xyXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICByZXR1cm4gbWF0Y2hEZXRhaWxzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZXRlcm1pbmVSb2xlKHBsYXllclN0YXRzOiBhbnkpOiBzdHJpbmcge1xyXG4gIC8vIFVzZSB0ZWFtUG9zaXRpb24gYXMgcHJpbWFyeSBpbmRpY2F0b3IgKG1vc3QgcmVsaWFibGUgZm9yIHJhbmtlZCBnYW1lcylcclxuICBpZiAocGxheWVyU3RhdHMudGVhbVBvc2l0aW9uKSB7XHJcbiAgICBjb25zdCBwb3NpdGlvbnM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XHJcbiAgICAgICdUT1AnOiAnVG9wJyxcclxuICAgICAgJ0pVTkdMRSc6ICdKdW5nbGUnLFxyXG4gICAgICAnTUlERExFJzogJ01pZCcsXHJcbiAgICAgICdCT1RUT00nOiAnQURDJyxcclxuICAgICAgJ1VUSUxJVFknOiAnU3VwcG9ydCdcclxuICAgIH07XHJcbiAgICByZXR1cm4gcG9zaXRpb25zW3BsYXllclN0YXRzLnRlYW1Qb3NpdGlvbl0gfHwgcGxheWVyU3RhdHMudGVhbVBvc2l0aW9uO1xyXG4gIH1cclxuXHJcbiAgLy8gRmFsbGJhY2sgdG8gaW5kaXZpZHVhbFBvc2l0aW9uIGlmIHRlYW1Qb3NpdGlvbiBpcyBub3QgYXZhaWxhYmxlXHJcbiAgaWYgKHBsYXllclN0YXRzLmluZGl2aWR1YWxQb3NpdGlvbiAmJiBwbGF5ZXJTdGF0cy5pbmRpdmlkdWFsUG9zaXRpb24gIT09ICdJbnZhbGlkJykge1xyXG4gICAgY29uc3QgcG9zaXRpb25zOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xyXG4gICAgICAnVE9QJzogJ1RvcCcsXHJcbiAgICAgICdKVU5HTEUnOiAnSnVuZ2xlJyxcclxuICAgICAgJ01JRERMRSc6ICdNaWQnLFxyXG4gICAgICAnQk9UVE9NJzogJ0FEQycsXHJcbiAgICAgICdVVElMSVRZJzogJ1N1cHBvcnQnXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHBvc2l0aW9uc1twbGF5ZXJTdGF0cy5pbmRpdmlkdWFsUG9zaXRpb25dIHx8IHBsYXllclN0YXRzLmluZGl2aWR1YWxQb3NpdGlvbjtcclxuICB9XHJcblxyXG4gIHJldHVybiAnVW5rbm93bic7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoXHJcbiAgcmVxOiBOZXh0QXBpUmVxdWVzdCxcclxuICByZXM6IE5leHRBcGlSZXNwb25zZVxyXG4pIHtcclxuICBjb25zdCB7IGdhbWVOYW1lLCB0YWdMaW5lLCByZWdpb24gPSAnbmExJyB9ID0gcmVxLnF1ZXJ5IGFzIHsgXHJcbiAgICBnYW1lTmFtZTogc3RyaW5nLCBcclxuICAgIHRhZ0xpbmU6IHN0cmluZywgXHJcbiAgICByZWdpb246IHN0cmluZyBcclxuICB9O1xyXG5cclxuICBpZiAoIWdhbWVOYW1lIHx8ICF0YWdMaW5lKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ0dhbWUgbmFtZSBhbmQgdGFnIGxpbmUgYXJlIHJlcXVpcmVkJyB9KTtcclxuICB9XHJcblxyXG4gIGlmICghcHJvY2Vzcy5lbnYuUklPVF9BUElfS0VZKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdSSU9UX0FQSV9LRVkgaXMgbm90IHNldCBpbiBlbnZpcm9ubWVudCB2YXJpYWJsZXMnKTtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnU2VydmVyIGNvbmZpZ3VyYXRpb24gZXJyb3InIH0pO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIC8vIFN0ZXAgMTogR2V0IFBVVUlEIHVzaW5nIFJpb3QgSURcclxuICAgIGNvbnN0IGFjY291bnRVcmwgPSBgaHR0cHM6Ly9hbWVyaWNhcy5hcGkucmlvdGdhbWVzLmNvbS9yaW90L2FjY291bnQvdjEvYWNjb3VudHMvYnktcmlvdC1pZC8ke2VuY29kZVVSSUNvbXBvbmVudChnYW1lTmFtZSl9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KHRhZ0xpbmUpfWA7XHJcbiAgICBjb25zdCBhY2NvdW50UmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhY2NvdW50VXJsLCB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnWC1SaW90LVRva2VuJzogcHJvY2Vzcy5lbnYuUklPVF9BUElfS0VZXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmICghYWNjb3VudFJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQWNjb3VudCBBUEkgRXJyb3I6ICR7YXdhaXQgYWNjb3VudFJlc3BvbnNlLnRleHQoKX1gKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhY2NvdW50RGF0YSA9IGF3YWl0IGFjY291bnRSZXNwb25zZS5qc29uKCk7XHJcbiAgICBjb25zdCBwdXVpZCA9IGFjY291bnREYXRhLnB1dWlkO1xyXG5cclxuICAgIC8vIFN0ZXAgMjogR2V0IHN1bW1vbmVyIGRhdGEgdXNpbmcgUFVVSURcclxuICAgIGNvbnN0IHJlZ2lvbmFsQXBpID0gYGh0dHBzOi8vJHtyZWdpb24udG9Mb3dlckNhc2UoKX0uYXBpLnJpb3RnYW1lcy5jb21gO1xyXG4gICAgY29uc3Qgc3VtbW9uZXJVcmwgPSBgJHtyZWdpb25hbEFwaX0vbG9sL3N1bW1vbmVyL3Y0L3N1bW1vbmVycy9ieS1wdXVpZC8ke3B1dWlkfWA7XHJcbiAgICBcclxuICAgIGNvbnN0IHN1bW1vbmVyUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChzdW1tb25lclVybCwge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ1gtUmlvdC1Ub2tlbic6IHByb2Nlc3MuZW52LlJJT1RfQVBJX0tFWVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIXN1bW1vbmVyUmVzcG9uc2Uub2spIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdW1tb25lciBBUEkgRXJyb3I6ICR7YXdhaXQgc3VtbW9uZXJSZXNwb25zZS50ZXh0KCl9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc3VtbW9uZXJEYXRhID0gYXdhaXQgc3VtbW9uZXJSZXNwb25zZS5qc29uKCk7XHJcblxyXG4gICAgLy8gU3RlcCAzOiBHZXQgcmFua2VkIHN0YXRzXHJcbiAgICBjb25zdCByYW5rZWRTdGF0cyA9IGF3YWl0IGdldFJhbmtlZFN0YXRzKHN1bW1vbmVyRGF0YS5pZCwgcmVnaW9uLCBwcm9jZXNzLmVudi5SSU9UX0FQSV9LRVkpO1xyXG5cclxuICAgIC8vIFN0ZXAgNDogR2V0IHJlY2VudCBtYXRjaGVzXHJcbiAgICBjb25zdCByb3V0aW5nVmFsdWUgPSBSRUdJT05fUk9VVElOR1tyZWdpb24gYXMgc3RyaW5nXSB8fCAnYW1lcmljYXMnO1xyXG4gICAgY29uc3QgbWF0Y2hMaXN0VXJsID0gYGh0dHBzOi8vJHtyb3V0aW5nVmFsdWV9LmFwaS5yaW90Z2FtZXMuY29tL2xvbC9tYXRjaC92NS9tYXRjaGVzL2J5LXB1dWlkLyR7cHV1aWR9L2lkcz9xdWV1ZT00MjAmc3RhcnQ9MCZjb3VudD0xMDBgO1xyXG4gICAgXHJcbiAgICBjb25zdCBtYXRjaExpc3RSZXNwb25zZSA9IGF3YWl0IGZldGNoKG1hdGNoTGlzdFVybCwge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ1gtUmlvdC1Ub2tlbic6IHByb2Nlc3MuZW52LlJJT1RfQVBJX0tFWVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIW1hdGNoTGlzdFJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTWF0Y2ggbGlzdCBBUEkgRXJyb3I6ICR7YXdhaXQgbWF0Y2hMaXN0UmVzcG9uc2UudGV4dCgpfWApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1hdGNoSWRzID0gYXdhaXQgbWF0Y2hMaXN0UmVzcG9uc2UuanNvbigpO1xyXG5cclxuICAgIC8vIFN0ZXAgNTogR2V0IG1hdGNoIGRldGFpbHMgd2l0aCByYXRlIGxpbWl0aW5nXHJcbiAgICBjb25zdCBtYXRjaERldGFpbHMgPSBhd2FpdCBnZXRNYXRjaERldGFpbHNXaXRoUmF0ZUxpbWl0KG1hdGNoSWRzLCByZWdpb24sIHByb2Nlc3MuZW52LlJJT1RfQVBJX0tFWSk7XHJcblxyXG4gICAgLy8gU3RlcCA2OiBDYWxjdWxhdGUgc3RhdHNcclxuICAgIGNvbnN0IGNoYW1waW9uU3RhdHMgPSBjYWxjdWxhdGVDaGFtcGlvblN0YXRzKFxyXG4gICAgICBtYXRjaERldGFpbHMuZmlsdGVyKG1hdGNoID0+IG1hdGNoICE9PSBudWxsKSxcclxuICAgICAgcHV1aWRcclxuICAgICk7XHJcblxyXG4gICAgY29uc3Qgcm9sZVN0YXRzID0gY2FsY3VsYXRlUm9sZVN0YXRzKG1hdGNoRGV0YWlscy5maWx0ZXIobWF0Y2ggPT4gbWF0Y2ggIT09IG51bGwpLCBwdXVpZCk7XHJcbiAgICBjb25zdCBtYWluUm9sZSA9IE9iamVjdC5lbnRyaWVzKHJvbGVTdGF0cylcclxuICAgICAgLnNvcnQoKFtfLCBhXSwgW19fLCBiXSkgPT4gYi5nYW1lcyAtIGEuZ2FtZXMpWzBdO1xyXG5cclxuICAgIC8vIENyZWF0ZSBjb2FjaGluZyBwcm9tcHRcclxuICAgIGNvbnN0IGNvYWNoaW5nUHJvbXB0ID0gY3JlYXRlQ29hY2hpbmdQcm9tcHQocmFua2VkU3RhdHMsIGNoYW1waW9uU3RhdHMsIHJvbGVTdGF0cyk7XHJcblxyXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xyXG4gICAgICBhY2NvdW50OiBhY2NvdW50RGF0YSxcclxuICAgICAgc3VtbW9uZXI6IHN1bW1vbmVyRGF0YSxcclxuICAgICAgcmFua2VkU3RhdHMsXHJcbiAgICAgIGNoYW1waW9uU3RhdHMsXHJcbiAgICAgIHJvbGVTdGF0cyxcclxuICAgICAgbWFpblJvbGU6IG1haW5Sb2xlWzBdLCAgLy8gU2VuZCBqdXN0IHRoZSByb2xlIG5hbWVcclxuICAgICAgY29hY2hpbmdQcm9tcHRcclxuICAgIH0pO1xyXG5cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRGV0YWlsZWQgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBcclxuICAgICAgZXJyb3I6ICdGYWlsZWQgdG8gZmV0Y2ggZGF0YScsXHJcbiAgICAgIGRldGFpbHM6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXHJcbiAgICB9KTtcclxuICB9XHJcbn0gIl0sIm5hbWVzIjpbIlJFR0lPTl9ST1VUSU5HIiwiZ2V0TWF0Y2hEZXRhaWxzIiwibWF0Y2hJZCIsInJlZ2lvbiIsImFwaUtleSIsInJvdXRpbmdWYWx1ZSIsInJlc3BvbnNlIiwiZmV0Y2giLCJoZWFkZXJzIiwib2siLCJjb25zb2xlIiwiZXJyb3IiLCJ0ZXh0IiwianNvbiIsImdldFJhbmtlZFN0YXRzIiwic3VtbW9uZXJJZCIsImNhbGN1bGF0ZUNoYW1waW9uU3RhdHMiLCJtYXRjaGVzIiwicHV1aWQiLCJjaGFtcGlvblN0YXRzIiwiZm9yRWFjaCIsIm1hdGNoIiwiaW5mbyIsImdhbWVEdXJhdGlvbiIsInF1ZXVlSWQiLCJwbGF5ZXJTdGF0cyIsInBhcnRpY2lwYW50cyIsImZpbmQiLCJwIiwiY2hhbXBpb25OYW1lIiwiZ2FtZUR1cmF0aW9uTWludXRlcyIsImdhbWVzUGxheWVkIiwid2lucyIsInRvdGFsS2lsbHMiLCJ0b3RhbERlYXRocyIsInRvdGFsQXNzaXN0cyIsInRvdGFsQ1MiLCJ0b3RhbEdhbWVEdXJhdGlvbiIsInRvdGFsVmlzaW9uU2NvcmUiLCJ3aW4iLCJraWxscyIsImRlYXRocyIsImFzc2lzdHMiLCJ0b3RhbE1pbmlvbnNLaWxsZWQiLCJuZXV0cmFsTWluaW9uc0tpbGxlZCIsInZpc2lvblNjb3JlIiwiT2JqZWN0IiwidmFsdWVzIiwibWFwIiwic3RhdHMiLCJ3aW5SYXRlIiwidG9GaXhlZCIsImF2Z0tpbGxzIiwiYXZnRGVhdGhzIiwiYXZnQXNzaXN0cyIsImtkYSIsIk1hdGgiLCJtYXgiLCJhdmdDU1Blck1pbiIsImF2Z0NTUGVyR2FtZSIsInJvdW5kIiwiYXZnVmlzaW9uU2NvcmUiLCJzb3J0IiwiYSIsImIiLCJjYWxjdWxhdGVSb2xlU3RhdHMiLCJyb2xlU3RhdHMiLCJUb3AiLCJnYW1lcyIsInBlcmNlbnRhZ2UiLCJKdW5nbGUiLCJNaWQiLCJBREMiLCJTdXBwb3J0IiwidmFsaWRNYXRjaGVzIiwiZmlsdGVyIiwicm9sZSIsImRldGVybWluZVJvbGUiLCJ0b3RhbEdhbWVzIiwibGVuZ3RoIiwia2V5cyIsImNyZWF0ZUNvYWNoaW5nUHJvbXB0IiwicmFua2VkU3RhdHMiLCJzb2xvUXVldWUiLCJxdWV1ZSIsInF1ZXVlVHlwZSIsInJhbmtlZEluZm8iLCJ0aWVyIiwicmFuayIsImxlYWd1ZVBvaW50cyIsImxvc3NlcyIsInJvbGVTZWN0aW9uIiwiZW50cmllcyIsIl8iLCJfXyIsImpvaW4iLCJjaGFtcGlvblNlY3Rpb24iLCJjaGFtcCIsImdldE1hdGNoRGV0YWlsc1dpdGhSYXRlTGltaXQiLCJtYXRjaElkcyIsIm1hdGNoRGV0YWlscyIsImJhdGNoU2l6ZSIsImkiLCJiYXRjaCIsInNsaWNlIiwiYmF0Y2hSZXN1bHRzIiwiUHJvbWlzZSIsImFsbCIsInB1c2giLCJyZXNvbHZlIiwic2V0VGltZW91dCIsInRlYW1Qb3NpdGlvbiIsInBvc2l0aW9ucyIsImluZGl2aWR1YWxQb3NpdGlvbiIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJnYW1lTmFtZSIsInRhZ0xpbmUiLCJxdWVyeSIsInN0YXR1cyIsInByb2Nlc3MiLCJlbnYiLCJSSU9UX0FQSV9LRVkiLCJhY2NvdW50VXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYWNjb3VudFJlc3BvbnNlIiwiRXJyb3IiLCJhY2NvdW50RGF0YSIsInJlZ2lvbmFsQXBpIiwidG9Mb3dlckNhc2UiLCJzdW1tb25lclVybCIsInN1bW1vbmVyUmVzcG9uc2UiLCJzdW1tb25lckRhdGEiLCJpZCIsIm1hdGNoTGlzdFVybCIsIm1hdGNoTGlzdFJlc3BvbnNlIiwibWFpblJvbGUiLCJjb2FjaGluZ1Byb21wdCIsImFjY291bnQiLCJzdW1tb25lciIsImRldGFpbHMiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/summoner.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsummoner&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csummoner.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();