"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/summoner";
exports.ids = ["pages/api/summoner"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsummoner&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csummoner.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsummoner&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csummoner.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_summoner_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src\\pages\\api\\summoner.ts */ \"(api)/./src/pages/api/summoner.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_summoner_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_summoner_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/summoner\",\n        pathname: \"/api/summoner\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_summoner_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnN1bW1vbmVyJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGc3JjJTVDcGFnZXMlNUNhcGklNUNzdW1tb25lci50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUMyRDtBQUMzRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsdURBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHVEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8/NDU3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vc3JjXFxcXHBhZ2VzXFxcXGFwaVxcXFxzdW1tb25lci50c1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3N1bW1vbmVyXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvc3VtbW9uZXJcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsummoner&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csummoner.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/pages/api/summoner.ts":
/*!***********************************!*\
  !*** ./src/pages/api/summoner.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nconst REGION_ROUTING = {\n    \"na1\": \"americas\",\n    \"euw1\": \"europe\",\n    \"kr\": \"asia\",\n    \"br1\": \"americas\",\n    \"eun1\": \"europe\",\n    \"jp1\": \"asia\",\n    \"la1\": \"americas\",\n    \"la2\": \"americas\",\n    \"oc1\": \"sea\",\n    \"tr1\": \"europe\",\n    \"ru\": \"europe\"\n};\nasync function getMatchDetails(matchId, region, apiKey) {\n    const routingValue = REGION_ROUTING[region] || \"americas\";\n    const response = await fetch(`https://${routingValue}.api.riotgames.com/lol/match/v5/matches/${matchId}`, {\n        headers: {\n            \"X-Riot-Token\": apiKey\n        }\n    });\n    if (!response.ok) {\n        console.error(`Failed to fetch match ${matchId}:`, await response.text());\n        return null;\n    }\n    return response.json();\n}\nasync function getRankedStats(summonerId, region, apiKey) {\n    const response = await fetch(`https://${region}.api.riotgames.com/lol/league/v4/entries/by-summoner/${summonerId}`, {\n        headers: {\n            \"X-Riot-Token\": apiKey\n        }\n    });\n    if (!response.ok) {\n        console.error(\"Failed to fetch ranked stats:\", await response.text());\n        return null;\n    }\n    return response.json();\n}\nfunction calculateChampionStats(matches, puuid) {\n    if (!matches || matches.length === 0) {\n        console.warn(\"No matches provided for champion stats calculation\");\n        return [];\n    }\n    const championStats = {};\n    let validMatchesCount = 0;\n    matches.forEach((match, index)=>{\n        if (!match || !match.info) {\n            console.warn(`Invalid match data at index ${index}`);\n            return;\n        }\n        // Skip remade games (games shorter than 5 minutes)\n        if (match.info.gameDuration < 300) {\n            console.log(`Skipping remade game ${match.info.gameId}`);\n            return;\n        }\n        // Only process ranked games\n        if (match.info.queueId !== 420 && match.info.queueId !== 440) {\n            console.log(`Skipping non-ranked game ${match.info.gameId} (Queue: ${match.info.queueId})`);\n            return;\n        }\n        const playerStats = match.info.participants.find((p)=>p.puuid === puuid);\n        if (!playerStats) {\n            console.warn(`Player not found in match ${match.info.gameId}`);\n            return;\n        }\n        validMatchesCount++;\n        const championName = playerStats.championName;\n        const gameDurationMinutes = match.info.gameDuration / 60;\n        if (!championStats[championName]) {\n            championStats[championName] = {\n                championName,\n                gamesPlayed: 0,\n                wins: 0,\n                totalKills: 0,\n                totalDeaths: 0,\n                totalAssists: 0,\n                totalCS: 0,\n                totalGameDuration: 0,\n                totalVisionScore: 0\n            };\n        }\n        championStats[championName].gamesPlayed++;\n        championStats[championName].wins += playerStats.win ? 1 : 0;\n        championStats[championName].totalKills += playerStats.kills || 0;\n        championStats[championName].totalDeaths += playerStats.deaths || 0;\n        championStats[championName].totalAssists += playerStats.assists || 0;\n        championStats[championName].totalCS += (playerStats.totalMinionsKilled || 0) + (playerStats.neutralMinionsKilled || 0);\n        championStats[championName].totalGameDuration += gameDurationMinutes;\n        championStats[championName].totalVisionScore += playerStats.visionScore || 0;\n    });\n    console.log(`Processed ${validMatchesCount} valid ranked matches out of ${matches.length} total matches`);\n    if (validMatchesCount === 0) {\n        console.warn(\"No valid ranked matches found for champion stats calculation\");\n        return [];\n    }\n    return Object.values(championStats).map((stats)=>({\n            championName: stats.championName,\n            gamesPlayed: stats.gamesPlayed,\n            winRate: (stats.wins / stats.gamesPlayed * 100).toFixed(1),\n            avgKills: (stats.totalKills / stats.gamesPlayed).toFixed(1),\n            avgDeaths: (stats.totalDeaths / stats.gamesPlayed).toFixed(1),\n            avgAssists: (stats.totalAssists / stats.gamesPlayed).toFixed(1),\n            kda: ((stats.totalKills + stats.totalAssists) / Math.max(1, stats.totalDeaths)).toFixed(2),\n            avgCSPerMin: (stats.totalCS / stats.totalGameDuration).toFixed(1),\n            avgCSPerGame: Math.round(stats.totalCS / stats.gamesPlayed),\n            avgVisionScore: (stats.totalVisionScore / stats.gamesPlayed).toFixed(1)\n        })).sort((a, b)=>b.gamesPlayed - a.gamesPlayed); // Sort by most played\n}\nfunction calculateRoleStats(matches, puuid) {\n    const roleStats = {\n        Top: {\n            games: 0,\n            wins: 0,\n            percentage: 0\n        },\n        Jungle: {\n            games: 0,\n            wins: 0,\n            percentage: 0\n        },\n        Mid: {\n            games: 0,\n            wins: 0,\n            percentage: 0\n        },\n        ADC: {\n            games: 0,\n            wins: 0,\n            percentage: 0\n        },\n        Support: {\n            games: 0,\n            wins: 0,\n            percentage: 0\n        }\n    };\n    // Filter for only ranked games (420 is Solo/Duo, 440 is Flex)\n    const validMatches = matches.filter((match)=>match && match.info.gameDuration >= 300 && // Skip remakes\n        (match.info.queueId === 420 || match.info.queueId === 440 // Only ranked games\n        ));\n    validMatches.forEach((match)=>{\n        const playerStats = match.info.participants.find((p)=>p.puuid === puuid);\n        if (!playerStats) return;\n        // Use teamPosition for more accurate role detection\n        const role = determineRole(playerStats);\n        if (role in roleStats) {\n            roleStats[role].games++;\n            roleStats[role].wins += playerStats.win ? 1 : 0;\n        }\n    });\n    // Calculate percentages based only on ranked games\n    const totalGames = validMatches.length;\n    Object.keys(roleStats).forEach((role)=>{\n        roleStats[role].percentage = roleStats[role].games / totalGames * 100;\n    });\n    return roleStats;\n}\nfunction createCoachingPrompt(rankedStats, championStats, roleStats) {\n    if (!rankedStats || championStats.length === 0) {\n        return \"No ranked data available for analysis.\";\n    }\n    const soloQueue = rankedStats.find((queue)=>queue.queueType === \"RANKED_SOLO_5x5\");\n    const rankedInfo = soloQueue ? `\r\nRanked Profile:\r\n- Tier: ${soloQueue.tier} ${soloQueue.rank}\r\n- LP: ${soloQueue.leaguePoints}\r\n- Win Rate: ${(soloQueue.wins / (soloQueue.wins + soloQueue.losses) * 100).toFixed(1)}%\r\n- Total Games: ${soloQueue.wins + soloQueue.losses}` : \"No Solo Queue data available.\";\n    const roleSection = `\r\nRole Distribution:\r\n${Object.entries(roleStats).filter(([_, stats])=>stats.games > 0).sort(([_, a], [__, b])=>b.games - a.games).map(([role, stats])=>`${role}: ${stats.games} games (${stats.percentage.toFixed(1)}% of games, ${(stats.wins / stats.games * 100).toFixed(1)}% WR)`).join(\"\\n\")}`;\n    const championSection = championStats.length > 0 ? `\r\nChampion Statistics (Ranked Season):\r\n${championStats.map((champ)=>`\r\n${champ.championName} (${champ.gamesPlayed} games):\r\n- Win Rate: ${champ.winRate}%\r\n- KDA: ${champ.avgKills}/${champ.avgDeaths}/${champ.avgAssists} (${champ.kda})\r\n- CS/min: ${champ.avgCSPerMin}\r\n- Vision Score: ${champ.avgVisionScore}`).join(\"\\n\")}` : \"\";\n    return `As a League of Legends coach, analyze this player's ranked season performance: \r\n${rankedInfo}\r\n${roleSection}\r\n${championSection}\r\n\r\nAnalyze the provided statistics and provide 3 goals, each accompanied by 3 actionable suggestions for improvement.\r\n\r\nTo help you choose the goals, here are some rules in the following format:\r\n- [player tendency]: [goal]\r\n\r\n- The player is playing their main role in less than 80% of their games: Stick to Main Role\r\n- The player has more than 5 games on a champion that is not in their top 3 most played champions: Stick to Main Champions\r\n- The player has on average more than 5 deaths: Minimize Deaths\r\n- The player has on average less than 7 CS/min: Improve CS/min\r\n`;\n}\nasync function getMatchDetailsWithRateLimit(matchIds, region, apiKey) {\n    const matchDetails = [];\n    const batchSize = 20; // Process 20 requests at a time\n    // Split matchIds into batches of 20\n    for(let i = 0; i < matchIds.length; i += batchSize){\n        const batch = matchIds.slice(i, i + batchSize);\n        // Process batch\n        const batchResults = await Promise.all(batch.map((matchId)=>getMatchDetails(matchId, region, apiKey)));\n        matchDetails.push(...batchResults);\n        // If there are more batches to process, wait 1 second\n        if (i + batchSize < matchIds.length) {\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n        }\n    }\n    return matchDetails;\n}\nfunction determineRole(playerStats) {\n    // Use teamPosition as primary indicator (most reliable for ranked games)\n    if (playerStats.teamPosition) {\n        const positions = {\n            \"TOP\": \"Top\",\n            \"JUNGLE\": \"Jungle\",\n            \"MIDDLE\": \"Mid\",\n            \"BOTTOM\": \"ADC\",\n            \"UTILITY\": \"Support\"\n        };\n        return positions[playerStats.teamPosition] || playerStats.teamPosition;\n    }\n    // Fallback to individualPosition if teamPosition is not available\n    if (playerStats.individualPosition && playerStats.individualPosition !== \"Invalid\") {\n        const positions = {\n            \"TOP\": \"Top\",\n            \"JUNGLE\": \"Jungle\",\n            \"MIDDLE\": \"Mid\",\n            \"BOTTOM\": \"ADC\",\n            \"UTILITY\": \"Support\"\n        };\n        return positions[playerStats.individualPosition] || playerStats.individualPosition;\n    }\n    return \"Unknown\";\n}\nasync function getAccountData(gameName, tagLine, apiKey) {\n    const response = await fetch(`https://americas.api.riotgames.com/riot/account/v1/accounts/by-riot-id/${encodeURIComponent(gameName)}/${encodeURIComponent(tagLine)}`, {\n        headers: {\n            \"X-Riot-Token\": apiKey\n        }\n    });\n    if (!response.ok) {\n        console.error(\"Failed to fetch account data:\", await response.text());\n        return null;\n    }\n    return response.json();\n}\nasync function getSummonerData(puuid, region, apiKey) {\n    const response = await fetch(`https://${region}.api.riotgames.com/lol/summoner/v4/summoners/by-puuid/${puuid}`, {\n        headers: {\n            \"X-Riot-Token\": apiKey\n        }\n    });\n    if (!response.ok) {\n        console.error(\"Failed to fetch summoner data:\", await response.text());\n        return null;\n    }\n    return response.json();\n}\nasync function getMatchIds(puuid, region, apiKey) {\n    const routingValue = REGION_ROUTING[region] || \"americas\";\n    // First get all recent matches without queue filter\n    const response = await fetch(`https://${routingValue}.api.riotgames.com/lol/match/v5/matches/by-puuid/${puuid}/ids?start=0&count=100`, {\n        headers: {\n            \"X-Riot-Token\": apiKey\n        }\n    });\n    if (!response.ok) {\n        console.error(\"Failed to fetch match IDs:\", await response.text());\n        return null;\n    }\n    const allMatches = await response.json();\n    console.log(`Found ${allMatches.length} total matches`);\n    // Get details for the first few matches to determine their queue types\n    const firstBatch = allMatches.slice(0, 20); // Check first 20 matches\n    const matchDetails = await Promise.all(firstBatch.map((matchId)=>getMatchDetails(matchId, region, apiKey)));\n    // Filter for ranked games (queue IDs 420 and 440)\n    const rankedMatches = matchDetails.filter((match)=>match !== null && (match.info.queueId === 420 || match.info.queueId === 440)).map((match)=>match.metadata.matchId);\n    console.log(`Found ${rankedMatches.length} ranked matches out of ${firstBatch.length} checked matches`);\n    return rankedMatches;\n}\nasync function handler(req, res) {\n    try {\n        const { gameName, tagLine, region = \"na1\" } = req.query;\n        if (!gameName || !tagLine) {\n            return res.status(400).json({\n                error: \"Game name and tag line are required\"\n            });\n        }\n        if (!process.env.RIOT_API_KEY) {\n            console.error(\"RIOT_API_KEY is not set in environment variables\");\n            return res.status(500).json({\n                error: \"Server configuration error\"\n            });\n        }\n        try {\n            console.log(`Fetching data for ${gameName}#${tagLine} in region ${region}`);\n            // Step 1: Get PUUID using Riot ID\n            const accountData = await getAccountData(gameName, tagLine, process.env.RIOT_API_KEY);\n            if (!accountData) {\n                console.error(\"Account not found for:\", gameName, tagLine);\n                return res.status(404).json({\n                    error: \"Account not found\"\n                });\n            }\n            console.log(\"Account found:\", accountData.puuid);\n            // Step 2: Get summoner data using PUUID\n            const summonerData = await getSummonerData(accountData.puuid, region, process.env.RIOT_API_KEY);\n            if (!summonerData) {\n                console.error(\"Summoner data not found for PUUID:\", accountData.puuid);\n                return res.status(404).json({\n                    error: \"Summoner data not found\"\n                });\n            }\n            console.log(\"Summoner data found:\", summonerData.id);\n            // Step 3: Get ranked stats\n            const rankedStats = await getRankedStats(summonerData.id, region, process.env.RIOT_API_KEY);\n            if (!rankedStats) {\n                console.warn(\"No ranked stats found for summoner:\", summonerData.id);\n            } else {\n                console.log(\"Found ranked stats:\", rankedStats.length, \"queues\");\n            }\n            // Step 4: Get match IDs\n            const matchIds = await getMatchIds(accountData.puuid, region, process.env.RIOT_API_KEY);\n            if (!matchIds || matchIds.length === 0) {\n                console.error(\"No matches found for PUUID:\", accountData.puuid);\n                return res.status(404).json({\n                    error: \"No ranked matches found\",\n                    details: \"The player has no recent ranked games in Solo Queue or Flex Queue\"\n                });\n            }\n            console.log(`Found ${matchIds.length} total matches`);\n            // Step 5: Get match details with rate limiting\n            console.log(`Fetching details for ${matchIds.length} matches...`);\n            const matchDetails = await getMatchDetailsWithRateLimit(matchIds.slice(0, 20), region, process.env.RIOT_API_KEY);\n            const validMatches = matchDetails.filter((match)=>match !== null);\n            if (validMatches.length === 0) {\n                console.error(\"No valid matches found after filtering\");\n                return res.status(404).json({\n                    error: \"No valid matches found\",\n                    details: \"Could not retrieve details for any of the matches\"\n                });\n            }\n            console.log(`Successfully fetched ${validMatches.length} valid matches out of ${matchIds.length} total matches`);\n            // Step 6: Calculate stats\n            const championStats = calculateChampionStats(validMatches, accountData.puuid);\n            const roleStats = calculateRoleStats(validMatches, accountData.puuid);\n            const mainRole = Object.entries(roleStats).sort(([_, a], [__, b])=>b.games - a.games).map(([role, stats])=>({\n                    role,\n                    stats\n                }))[0];\n            // Step 7: Create coaching prompt\n            const coachingPrompt = createCoachingPrompt(rankedStats, championStats, roleStats);\n            // Return all data\n            res.status(200).json({\n                account: accountData,\n                summoner: summonerData,\n                rankedStats,\n                championStats,\n                roleStats,\n                mainRole,\n                coachingPrompt,\n                debug: {\n                    totalMatches: matchIds.length,\n                    validMatches: validMatches.length,\n                    processedChampions: championStats.length,\n                    region: region,\n                    routingValue: REGION_ROUTING[region] || \"americas\"\n                }\n            });\n        } catch (error) {\n            console.error(\"Detailed error:\", error);\n            res.status(500).json({\n                error: \"Failed to fetch data\",\n                details: error instanceof Error ? error.message : \"Unknown error\",\n                path: error?.response?.url || \"Unknown path\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Detailed error:\", error);\n        res.status(500).json({\n            error: \"An error occurred while processing your request\",\n            details: error.message\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/summoner.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsummoner&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csummoner.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();